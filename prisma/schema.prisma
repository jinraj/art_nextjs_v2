generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Artwork {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  artType     ArtType
  title       String
  description String
  images      String[]
  dimensions  String
  medium      String
  price       Float
  artistId    String   @db.ObjectId
  likes       Int      @default(0)
  isHidden    Boolean  @default(false)
  isSold      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  artist     User        @relation(fields: [artistId], references: [id])
  orderItems OrderItem[] // relation back
  carts      Cart[] // relation back
}

enum ArtType {
  Paintings
  Photography
  Decors
  Artifacts
}

model Cart {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  artworkId  String     @db.ObjectId
  cartedById String     @db.ObjectId
  quantity   Int
  cartedAt   DateTime   @default(now())
  status     CartStatus @default(Active)

  artwork Artwork @relation(fields: [artworkId], references: [id])
  user    User    @relation(fields: [cartedById], references: [id])
}

enum CartStatus {
  Active
  Ordered
  Removed
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String    @unique
  password   String
  role       Role
  address    String?
  landmark   String?
  city       String
  state      String
  country    String
  verifiedAt DateTime?
  isApproved Boolean   @default(false)
  approvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  orders           Order[] // relation back
  carts            Cart[] // relation back
  artworks         Artwork[] // relation back
  reviews          AppReview? // one review per user
  verificationCode VerificationCode? // <-- add this line
}

enum Role {
  Artist
  Admin
  Customer
}

model VerificationCode {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  // Store only a HASH of the code (never the plain 6-digit code)
  codeHash String

  expiresAt DateTime
  attempts  Int      @default(0) // count verification tries
  createdAt DateTime @default(now())
}

model AppReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId])
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  totalAmount Float
  status      OrderStatus @default(Pending)
  orderedAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[] // relation back
}

model OrderItem {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String @db.ObjectId
  artworkId       String @db.ObjectId
  quantity        Int
  priceAtPurchase Float

  order   Order   @relation(fields: [orderId], references: [id])
  artwork Artwork @relation(fields: [artworkId], references: [id])
}

enum OrderStatus {
  Pending
  Completed
  Cancelled
}
